matrix_model <- confusionMatrix(predict_model, testingIL$diagnosis)
matrix_model$overall[1]
model <- lm(diagnosis ~ ., data = trainingIL, method = "glm")
predict_model <- predict(model, newdata= testingIL)
matrix_model <- confusionMatrix(predict_model, testingIL$diagnosis)
matrix_model$overall[1]
model <- train(diagnosis ~ ., data = trainingIL, method = "glm")
predict_model <- predict(model, newdata= testingIL)
matrix_model <- confusionMatrix(predict_model, testingIL$diagnosis)
matrix_model$overall[1]
train?
)
?train
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# grep all columns with IL and diagnosis in the traning and testing set
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- testing[,grep("^IL|diagnosis", names(testing))]
model <- train(diagnosis ~ ., data = trainingIL, method = "glm")
head(spam)
data(spam)
head(spam)
View(spam)
temp <- tempfile()
download.file("https://github.com/datasets/geo-countries/raw/master/data/countries.geojson",temp)
countries_polygons <- readOGR(temp)
library(utils)
library(httr)
temp <- tempfile()
countries_polygons <- readOGR(temp)
temp <- tempfile()
download.file("https://simplemaps.com/static/data/world-cities/basic/simplemaps_worldcities_basicv1.6.zip",temp)
countries <- read.csv(unzip(temp, "worldcities.csv"), sep = ',')
View(countries)
library(tidyverse)
library(leaflet)
library(rgdal)
library(RColorBrewer)
install.packages(c("rgdal", "tidyverse"))
install.packages(c("rgdal", "tidyverse"))
#Downloading the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
library(utils)
library(httr)
library(tidyverse)
library(leaflet)
library(rgdal)
library(RColorBrewer)
library(httr)
library(tidyverse)
library(leaflet)
library(rgdal)
library(RColorBrewer)
#Downloading the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
data <- read.csv(tf)
#Downloading the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
data <- read.csv(tf)
#Downloading the dataset from simplemaps to a local temporary file
temp <- tempfile()
download.file("https://simplemaps.com/static/data/world-cities/basic/simplemaps_worldcities_basicv1.6.zip",temp)
countries <- read.csv(unzip(temp, "worldcities.csv"), sep = ',')
unlink(temp)
#subsetting data
columnas <- c('countriesAndTerritories', 'cases', 'countryterritoryCode')
data <- data[columnas]
data <- aggregate(cases ~ countriesAndTerritories+countryterritoryCode, data = data, sum)
cnts <- countries %>%
subset(capital == 'primary') %>%
select(c(iso3 , lat, lng))
#merging data frames into one
data_merged <- merge(x=data, y=cnts, by.x = 'countryterritoryCode', by.y = 'iso3')
#download map features
temp <- tempfile()
download.file("https://github.com/datasets/geo-countries/raw/master/data/countries.geojson",temp)
countries_polygons <- readOGR(temp)
unlink(temp)
data_merged <- data_merged[!duplicated(data_merged$countriesAndTerritories), ]
data_merged <- data_merged[order(-data_merged$cases), ]
rownames(data_merged) <- 1:nrow(data_merged)
pal <- colorFactor('Blues', NULL)
# leaflet() %>%
#   addTiles() %>%
#   addPolygons(data = countries_polygons,stroke = FALSE,
#               smoothFactor = 0.2,
#               fillOpacity = 1,
#               fillColor = ~pal(data_merged$cases)
#               )
data_merged %>%
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addCircleMarkers(
lng = data_merged$lng,
lat = data_merged$lat,
radius = data_merged$cases/2000,
popup = paste( "Country: ", data_merged$countriesAndTerritories, "<br> Confirmed Cases: ",
data_merged$cases),
fillOpacity = 0.5
#clusterOptions = markerClusterOptions()
)
library(utils)
library(httr)
library(tidyverse)
library(leaflet)
library(rgdal)
library(RColorBrewer)
#Downloading the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
data <- read.csv(tf)
#Downloading the dataset from simplemaps to a local temporary file
temp <- tempfile()
download.file("https://simplemaps.com/static/data/world-cities/basic/simplemaps_worldcities_basicv1.6.zip",temp)
countries <- read.csv(unzip(temp, "worldcities.csv"), sep = ',')
unlink(temp)
#subsetting data
columnas <- c('countriesAndTerritories', 'cases', 'countryterritoryCode')
data <- data[columnas]
data <- aggregate(cases ~ countriesAndTerritories+countryterritoryCode, data = data, sum)
cnts <- countries %>%
subset(capital == 'primary') %>%
select(c(iso3 , lat, lng))
#merging data frames into one
data_merged <- merge(x=data, y=cnts, by.x = 'countryterritoryCode', by.y = 'iso3')
#download map features
temp <- tempfile()
download.file("https://github.com/datasets/geo-countries/raw/master/data/countries.geojson",temp)
countries_polygons <- readOGR(temp)
unlink(temp)
data_merged <- data_merged[!duplicated(data_merged$countriesAndTerritories), ]
data_merged <- data_merged[order(-data_merged$cases), ]
rownames(data_merged) <- 1:nrow(data_merged)
pal <- colorFactor('Blues', NULL)
# leaflet() %>%
#   addTiles() %>%
#   addPolygons(data = countries_polygons,stroke = FALSE,
#               smoothFactor = 0.2,
#               fillOpacity = 1,
#               fillColor = ~pal(data_merged$cases)
#               )
data_merged %>%
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addCircleMarkers(
lng = data_merged$lng,
lat = data_merged$lat,
radius = data_merged$cases/2000,
popup = paste( "Country: ", data_merged$countriesAndTerritories, "<br> Confirmed Cases: ",
data_merged$cases),
fillOpacity = 0.5
#clusterOptions = markerClusterOptions()
)
data_merged
install.packages("rgdal")
install.packages("plotly")
data_merged
library(plotly)
plot_ly(data_merged)
plot_ly(x=data_merged$countriesAndTerritories, y=data_merged$cases)
?plot_ly
data(mtcars)
plot_ly(x = mtcars$wt)
plot_ly(x = ~mtcars$wt)
data_merged%>%
View(data_merged)
View(data_merged)
plot_geo(x = ~lng, y = ~lat) %>%
add_markers(size=cases/1000)
data_merged%>%
plot_geo(x=~lng,y=~lat)%>%
add_markers(size=cases)
countries_polygons
temp <- tempfile()
download.file("https://github.com/datasets/geo-countries/raw/master/data/countries.geojson",temp)
countries_polygons <- readOGR(temp)
library(rgdal)
library(RColorBrewer)
install.packages("rgdal")
download.file("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",tf)
?download.file
tf<-tempfile()
download.file("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",tf)
tf
read.csv(tf)
#Downloading the dataset from simplemaps to a local temporary file
temp <- tempfile()
download.file("https://simplemaps.com/static/data/world-cities/basic/simplemaps_worldcities_basicv1.6.zip",temp)
countries <- read.csv(unzip(temp, "worldcities.csv"), sep = ',')
unlink(temp)
columnas <- c('countriesAndTerritories', 'cases', 'countryterritoryCode')
data <- data[columnas]
data <- aggregate(cases ~ countriesAndTerritories+countryterritoryCode, data = data, sum)
cnts <- countries %>%
subset(capital == 'primary') %>%
select(c(iso3 , lat, lng))
data
data <- read.csv(tf)
View(data)
columnas <- c('countriesAndTerritories', 'cases', 'countryterritoryCode')
data <- data[columnas]
data <- aggregate(cases ~ countriesAndTerritories+countryterritoryCode, data = data, sum)
cnts <- countries %>%
subset(capital == 'primary') %>%
select(c(iso3 , lat, lng))
View(data)
data_merged <- merge(x=data, y=cnts, by.x = 'countryterritoryCode', by.y = 'iso3')
cnts <- countries %>%
subset(capital == 'primary') %>%
select(c(iso3 , lat, lng))
library(utils)
library(httr)
library(tidyverse)
library(leaflet)
library(RColorBrewer)
cnts <- countries %>%
subset(capital == 'primary') %>%
select(c(iso3 , lat, lng))
data_merged <- merge(x=data, y=cnts, by.x = 'countryterritoryCode', by.y = 'iso3')
data_merged <- data_merged[!duplicated(data_merged$countriesAndTerritories), ]
data_merged <- data_merged[order(-data_merged$cases), ]
rownames(data_merged) <- 1:nrow(data_merged)
data_merged %>%
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addCircleMarkers(
lng = data_merged$lng,
lat = data_merged$lat,
radius = data_merged$cases/2000,
popup = paste( "Country: ", data_merged$countriesAndTerritories, "<br> Confirmed Cases: ",
data_merged$cases),
fillOpacity = 0.5
#clusterOptions = markerClusterOptions()
)
data_merged %>%
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addTiles() %>%
addCircleMarkers(
lng = data_merged$lng,
lat = data_merged$lat,
radius = data_merged$cases/2000,
popup = paste( "Country: ", data_merged$countriesAndTerritories, "<br> Confirmed Cases: ",
data_merged$cases),
fillOpacity = 0.5,
clusterOptions = markerClusterOptions()
)
View(cnts)
unlink(temp)
tf<-tempfile()
download.file("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",tf)
data <- read.csv(tf)
unlink(tf)
data
filter(data,countriesAndTerritories = 'France')
select(data,countriesAndTerritories = 'France')
View(data)
View(data)
View(data)
columas <- c('dateRep','countriesAndTerritories', 'cases', 'death','countryterritoryCode')
data <- data[columnas]
data
tf<-tempfile()
download.file("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",tf)
data <- read.csv(tf)
unlink(tf)
columns <- c('dateRep','countriesAndTerritories', 'cases', 'death','countryterritoryCode')
data <- data[columns]
columns <- c('dateRep','countriesAndTerritories', 'cases', 'death','countryterritoryCode')
data <- data[columns]
View(data_merged)
head(data)
columns <- c('dateRep','countriesAndTerritories', 'cases', 'deaths','countriesAndTerritories')
data <- data[columns]
data
tf<-tempfile()
download.file("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",tf)
data <- read.csv(tf)
unlink(tf)
columns <- c('dateRep','countriesAndTerritories', 'cases', 'deaths')
data <- data[columns]
data$countriesAndTerritories==France
data$countriesAndTerritories=='France'
data_france<-filter(data,countriesAndTerritories=='France')
data_france
data_fr<-filter(data,countriesAndTerritories=='France')
data%>%
filter(countriesAndTerritories=='France')
data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>'27/02/2020')
class(data_fr$dateRep)
class(data_fr$dateRep[1])
data_fr$dateRep[1]
date(data_fr$dateRep)
date()
as.Date(data_fr$dateRep, format = "%d/%m/%Y")
data_fr$dateRep<-as.Date(data_fr$dateRep, format = "%d/%m/%Y")
class(data_fr$dateRep)
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>'27/02/2020')
data_fr
data_fr$dateRep
data_fr$dateRep<-as.Date(data_fr$dateRep, format = "%d/%m/%Y")
data_fr$dateRep
data_fr<-data%>%
filter(countriesAndTerritories=='France')
class(data_fr$dateRep)
data_fr$dateRep<-as.Date(data_fr$dateRep, format = "%d/%m/%Y")
class(data_fr$dateRep)
data_fr$dateRep[1]
data_fr$dateRep[1]-data_fr$dateRep[2]
data_fr$dateRep[1]>data_fr$dateRep[2]
data <- data[columns]
data_fr$dateRep<-as.Date(data_fr$dateRep, format = "%d/%m/%Y")
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>as.Date('27/02/2020',format="%d/%m/%Y"))
data_fr
data <- data[columns]
data$dateRep<-as.Date(data$dateRep, format = "%d/%m/%Y")
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>as.Date('27/02/2020',format="%d/%m/%Y"))
data_fr
plot_ly(x=data_fr$dateRep,y=data_fr$cases)
library(plotly)
plot_ly(x=data_fr$dateRep,y=data_fr$cases)
plot_ly(x=data_fr$dateRep,y=data_fr$cases,type = "bar")
plot_ly(x=data_fr$dateRep,y=data_fr$cases+data_fr$deaths,type = "bar")
plot_ly(x=data_fr$dateRep,y=data_fr$cases+data_fr$deaths,col=c('case','death'),type = "bar")
plot_ly(x=data_fr$dateRep,y=data_fr$cases,type = "bar")
plot_ly(x=data_fr$dateRep,y=data_fr$deaths,type = "bar")
cumsum(1:10)
data_fr$cum_cases <-cumsum(data_fr$cases )
View(data_fr)
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>as.Date('27/02/2020',format="%d/%m/%Y"))
cumsum(data_fr$cases )
reverse
1:10
revcumsum(data_fr$cases )
rev(1:10)
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>as.Date('27/02/2020',format="%d/%m/%Y"))
data_fr$cum_cases <-cumsum(rev(data_fr$cases) )
View(data_fr)
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>as.Date('27/02/2020',format="%d/%m/%Y"))
cumsum(data_fr$cases )
rev(cumsum(data_fr$cases ))
data_fr$cum_cases <-rev(cumsum(data_fr$cases ))
plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = "bar")
plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = "line")
plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines')
plot_ly(x=~data_fr$dateRep,y=~data_fr$cum_cases,type = 'scatter', mode = 'lines')
plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines')
fig <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines')
fig <-fig%>%plot_ly(x=data_fr$dateRep,y=data_fr$cases,type = "bar")
fig <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines')
fig <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines')
fig <-fig%>%add_trace(y=data_fr$cases,type = "bar")
fig
fig <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines',name = "total cases")
fig <-fig%>%add_trace(y=data_fr$cases,type = "bar", name="new cases")
fig
fig <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines',name = "total cases")
fig <-fig%>%add_trace(y=data_fr$cases, name="new cases")
fig
fig <- plot_ly(data, x=dateRep,y=cum_cases, type = 'bar', name = 'New confirmed cases')
fig <- fig %>% add_trace(y = deaths, type = 'bar',name = 'New deaths')
fig <- fig %>% layout(yaxis = list(title = 'Count'), barmode = 'stack')
fig <- plot_ly(data_fr, x=dateRep,y=cum_cases, type = 'bar', name = 'New confirmed cases')
fig <- fig %>% add_trace(y = deaths, type = 'bar',name = 'New deaths')
fig <- plot_ly(data_fr, x=dateRep,y=cases, type = 'bar', name = 'New confirmed cases')
fig <- plot_ly(data=data_fr, x=dateRep,y=cases, type = 'bar', name = 'New confirmed cases')
fig <- plot_ly( x=data_fr$dateRep,y=data_fr$cases, type = 'bar', name = 'New confirmed cases')
fig <- fig %>% add_trace(y = data_fr$deaths, type = 'bar',name = 'New deaths')
fig <- fig %>% layout(yaxis = list(title = 'Count'), barmode = 'stack')
fig
fig <- fig %>% layout( barmode = 'stack')
fig
fig <- plot_ly( x=data_fr$dateRep,y=data_fr$cases, type = 'bar', name = 'New confirmed cases')
fig <- fig %>% add_trace(y = data_fr$deaths, type = 'bar',name = 'New deaths')
fig <- fig %>% layout( barmode = 'stack')
fig
fig0 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines',name = "total cases")
fig0
fig1 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_deaths,type = 'scatter', mode = 'lines',name = "total deaths")
fig1
data_fr$cum_deaths <-rev(cumsum(data_fr$deaths ))
fig1 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_deaths,type = 'scatter', mode = 'lines',name = "total deaths")
fig1
fig2 <- plot_ly( x=data_fr$dateRep,y=data_fr$cases, type = 'bar', name = 'New confirmed cases')
fig2 <- fig2 %>% add_trace(y = data_fr$deaths, type = 'bar',name = 'New deaths')
fig3 <- fig2 %>% layout( barmode = 'stack')
fig3
library(dplyr)
source('~/data_study/DeveloppingDataProducts/plotly/plotly.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(plotly)
tf<-tempfile()
download.file("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",tf)
data <- read.csv(tf)
unlink(tf)
columns <- c('dateRep','countriesAndTerritories', 'cases', 'deaths')
data <- data[columns]
data$dateRep<-as.Date(data$dateRep, format = "%d/%m/%Y")
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>=as.Date('27/02/2020',format="%d/%m/%Y"))
data_fr$cum_cases <-rev(cumsum(data_fr$cases ))
data_fr$cum_deaths <-rev(cumsum(data_fr$deaths ))
fig0 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines',name = "total cases")
fig0
fig1 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_deaths,type = 'scatter', mode = 'lines',name = "total deaths")
fig1
fig2 <- plot_ly( x=data_fr$dateRep,y=data_fr$cases, type = 'bar', name = 'New confirmed cases')
fig2 <- fig2 %>% add_trace(y = data_fr$deaths, type = 'bar',name = 'New deaths')
fig2 <- fig2 %>% layout( barmode = 'stack')
fig2 <- plot_ly( x=data_fr$dateRep,y=data_fr$cases, type = 'bar', name = 'New confirmed cases')
fig2 <- fig2 %>% add_trace(y = data_fr$deaths, type = 'bar',name = 'New deaths')
fig2 <- fig2 %>% layout( barmode = 'stack')
fig2
fig0 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines',name = "total cases",title(main ="Total confirmend cases" ))
fig0 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines',name = "total cases",main ="Total confirmend cases" )
fig0
fig0 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines',name = "total cases",title ="Total confirmend cases" )
fig0
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(plotly)
tf<-tempfile()
download.file("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",tf)
data <- read.csv(tf)
unlink(tf)
columns <- c('dateRep','countriesAndTerritories', 'cases', 'deaths')
data <- data[columns]
data$dateRep<-as.Date(data$dateRep, format = "%d/%m/%Y")
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>=as.Date('27/02/2020',format="%d/%m/%Y"))
data_fr$cum_cases <-rev(cumsum(data_fr$cases ))
data_fr$cum_deaths <-rev(cumsum(data_fr$deaths ))
fig0 <-plot_ly(x=data_fr$dateRep,y=data_fr$cum_cases,type = 'scatter', mode = 'lines',name = "total cases" )%>%
layout(title ="Total confirmend cases")
fig0
library(dplyr)
library(plotly)
tf<-tempfile()
download.file("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv",tf)
data <- read.csv(tf)
unlink(tf)
columns <- c('dateRep','countriesAndTerritories', 'cases', 'deaths')
data <- data[columns]
data$dateRep<-as.Date(data$dateRep, format = "%d/%m/%Y")
data_fr<-data%>%
filter(countriesAndTerritories=='France')%>%
filter(dateRep>=as.Date('27/02/2020',format="%d/%m/%Y"))
data_fr
rev(data_fr$cases )
rev(cumsum(rev(data_fr$cases )))
fig2 <- plot_ly( x=data_fr$dateRep,y=data_fr$cases, type = 'bar', name = 'New confirmed cases',width = 800, height = 500) %>%
add_trace(y = data_fr$deaths, type = 'bar',name = 'New deaths') %>%
layout( barmode = 'stack')%>%layout(title ="Daily confirmend cases and deaths in France from 27/02/2020")
shiny::runApp('data_study/DeveloppingDataProducts/Covid-19_plotter')
runApp('data_study/DeveloppingDataProducts/Covid-19_plotter')
runApp('data_study/DeveloppingDataProducts/Covid-19_plotter')
install.packages("slidify")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
setwd("data_study/DeveloppingDataProducts/Covid-19_plotter")
library(slidify)
author("Pitch_App")
ddir())
dir()
shiny::runApp('~/data_study/DeveloppingDataProducts/Covid-19_plotter')
getwd()
dir()
dir("assets/")
publish(title = 'Pitch App', 'index.html', host = 'rpubs')
publish(title = 'Pitch App', 'index.html', host = 'rpubs')
dir()
slidify("index.Rmd")
publish_github("limaisae", "shinyApp")
slidify("index.Rmd")
